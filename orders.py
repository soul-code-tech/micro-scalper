import os, time, math, hmac, hashlib, requests, logging
from typing import Optional, Tuple
from settings import CONFIG
import random

logging.basicConfig(level=logging.DEBUG)

ENDPOINT = "https://open-api.bingx.com"
API_KEY  = os.getenv("BINGX_API_KEY")
SECRET   = os.getenv("BINGX_SECRET_KEY")

REQ_TIMEOUT = 5   # ‚Üê –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤


import os
import time
import math
import hmac
import hashlib
import requests
import logging
from typing import Optional, Dict, Any
from settings import CONFIG

logging.basicConfig(level=logging.DEBUG)

ENDPOINT = "https://open-api.bingx.com"
API_KEY = os.getenv("BINGX_API_KEY")
SECRET = os.getenv("BINGX_SECRET_KEY")

REQ_TIMEOUT = 5

def _get_precision(symbol: str) -> Tuple[int, int]:
    public_sym = symbol
    try:
        r = requests.get(f"{ENDPOINT}/openApi/swap/v2/quote/contracts",
                         params={"symbol": public_sym}, timeout=REQ_TIMEOUT)
        r.raise_for_status()
        for s in r.json()["data"]:
            if s["symbol"] == public_sym:
                return int(s["pricePrecision"]), int(s["quantityPrecision"])
    except Exception as e:
        logging.warning("‚ö†Ô∏è _get_precision failed for %s: %s", symbol, e)
    return 4, 3

def _sign(params: dict) -> str:
    query = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
    return hmac.new(SECRET.encode(), query.encode(), hashlib.sha256).hexdigest()

def _private_request(method: str, endpoint: str, params: dict) -> dict:
    params = params.copy()
    params["timestamp"] = int(time.time() * 1000)

    # 1. —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å—Ç—Ä–æ–∏–º query-string
    sorted_items = sorted(params.items())
    query_str = "&".join(f"{k}={v}" for k, v in sorted_items)

    # 2. –ø–æ–¥–ø–∏—Å—å
    signature = hmac.new(SECRET.encode(), query_str.encode(), hashlib.sha256).hexdigest()
    query_str += f"&signature={signature}"

    # 3. —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL
    url = ENDPOINT.rstrip("/") + "/" + endpoint.lstrip("/") + "?" + query_str
    headers = {"X-BX-APIKEY": API_KEY}

    # 4. –∑–∞–ø—Ä–æ—Å –ë–ï–ó params, —á—Ç–æ–±—ã requests –Ω–µ —Ç—Ä–æ–≥–∞–ª –ø–æ—Ä—è–¥–æ–∫
    r = requests.request(method, url, headers=headers, timeout=REQ_TIMEOUT, verify=False)

    print("=== MAYAK ===")
    print("METHOD :", method)
    print("URL    :", url)
    print("STATUS :", r.status_code)
    print("TEXT   :", r.text[:300])
    print("=== END ===")

    r.raise_for_status()
    return r.json()

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: %s", e)
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")

def _get_precision(symbol: str) -> Tuple[int, int]:
    public_sym = symbol
    try:
        r = requests.get(f"{ENDPOINT}/openApi/swap/v2/quote/contracts",
                         params={"symbol": public_sym}, timeout=REQ_TIMEOUT)
        r.raise_for_status()
        for s in r.json()["data"]:
            if s["symbol"] == public_sym:
                return int(s["pricePrecision"]), int(s["quantityPrecision"])
    except Exception as e:
        logging.warning("‚ö†Ô∏è _get_precision failed for %s: %s", symbol, e)
    return 4, 3

def _sign(params: dict) -> str:
    query = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
    return hmac.new(SECRET.encode(), query.encode(), hashlib.sha256).hexdigest()

def limit_entry(symbol: str, side: str, usd_qty: float, leverage: int,
                sl_price: float, tp_price: float) -> Optional[Tuple[str, float, float]]:
    price_prec, lot_prec = _get_precision(symbol)
    public_sym = symbol

    # ---------- —Å—Ç–∞–∫–∞–Ω ----------
    try:
        raw = requests.get(
            f"{ENDPOINT}/openApi/swap/v2/quote/depth",
            params={"symbol": public_sym, "limit": 5}, timeout=REQ_TIMEOUT
        ).json()["data"]
    except Exception as e:
        logging.warning("‚ö†Ô∏è %s ‚Äì –æ—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞: %s", symbol, e)
        return None

    if side == "BUY":
        entry_px = float(raw["bids"][0][0]) - 10 ** -price_prec
    else:
        entry_px = float(raw["asks"][0][0]) + 10 ** -price_prec

    # ---------- –æ–±—ä—ë–º ----------
    qty_usd = usd_qty * leverage
    qty_coin = round(qty_usd / entry_px, lot_prec)

    # ---------- –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú –ö –°–¢–†–û–ö–ï ----------
    entry_px_str = f"{entry_px:.{price_prec}f}".rstrip("0").rstrip(".")
    qty_coin_str = f"{qty_coin:.{lot_prec}f}".rstrip("0").rstrip(".")
    if float(qty_coin_str) <= 0:
        logging.warning("‚ö†Ô∏è %s ‚Äì quantity ‚â§ 0", symbol)
        return None

    params = {
        "symbol": symbol.replace("-", ""),
        "side": side,
        "type": "LIMIT",
        "timeInForce": "POST_ONLY",
        "price": entry_px_str,        # ‚Üê —Å—Ç—Ä–æ–∫–∞
        "quantity": qty_coin_str,     # ‚Üê —Å—Ç—Ä–æ–∫–∞
        "leverage": str(leverage),    # ‚Üê —Å—Ç—Ä–æ–∫–∞
    }

    resp = _private_request("POST", "/openApi/swap/v2/trade/order", params)
    if resp.get("code") != 0:
        logging.warning("‚ö†Ô∏è %s ‚Äì –±–∏—Ä–∂–∞ –æ—Ç–≤–µ—Ä–≥–ª–∞ –æ—Ä–¥–µ—Ä: %s", symbol, resp)
        return None

    order_id = resp["data"]["order"]["id"]
    logging.info("üí° %s %s limit @ %s  qty=%s  orderId=%s",
                 symbol, side, entry_px_str, qty_coin_str, order_id)
    return order_id, float(entry_px_str), float(qty_coin_str)

    # ---------- —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ----------
    try:
        if not resp or resp.get("code") != 0 or "data" not in resp or not resp["data"] or "order" not in resp["data"]:
            logging.warning("‚ö†Ô∏è %s ‚Äì –±–∏—Ä–∂–∞ –æ—Ç–≤–µ—Ä–≥–ª–∞ –æ—Ä–¥–µ—Ä: %s", symbol, resp)
            return None
        order_id = resp["data"]["order"]["id"]
    except Exception as e:
        logging.warning("‚ö†Ô∏è %s ‚Äì –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: %s", symbol, e)
        return None

    logging.info("üí° %s %s limit @ %s  qty=%s  orderId=%s",
                 symbol, side, entry_px, qty_coin, order_id)
    print("DBG –ø–µ—Ä–µ–¥ —É—Å–ø–µ—Ö–æ–º", symbol, order_id, entry_px, qty_coin)
    return order_id, entry_px, qty_coin
    

def await_fill_or_cancel(order_id: str, symbol: str, max_sec: float = 8) -> Optional[float]:
    t0 = time.time()
    print("DBG await_fill_or_cancel", symbol, order_id)
    while time.time() - t0 < max_sec:
        # ---------- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ----------
        try:
            resp = _private_request("GET", "/openApi/swap/v2/trade/order",
                                    {"symbol": symbol, "orderId": order_id})
            order = resp.get("data", {})
            if order.get("status") == "FILLED":
                return float(order["avgPrice"])
        except Exception as e:
            print("DBG await exception", e)
            logging.warning("‚ö†Ô∏è  await_fill %s: %s", symbol, e)
        time.sleep(0.5)

    # –Ω–µ —É—Å–ø–µ–ª–∏ ‚Äì –æ—Ç–º–µ–Ω—è–µ–º
    try:
        _private_request("DELETE", "/openApi/swap/v2/trade/order",
                         {"symbol": symbol, "orderId": order_id})
        logging.warning("‚è≠ %s –ª–∏–º–∏—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω ‚Äì –æ—Ç–º–µ–Ω–∞", symbol)
    except Exception as e:
        logging.warning("‚ö†Ô∏è  await_cancel %s: %s", symbol, e)
    return None
   

def limit_sl_tp(symbol: str, side: str, qty_coin: float,
                sl_price: float, tp_price: float) -> Tuple[str, str]:
    """–°–æ–∑–¥–∞—ë—Ç 2 –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ (SL –∏ TP) –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (orderId_SL, orderId_TP)"""
    opposite = "SELL" if side == "BUY" else "BUY"
    ids = []
    for name, px in (("SL", sl_price), ("TP", tp_price)):
        params = {
            "symbol": symbol.replace("-", ""),   # —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å
            "side": opposite,
            "type": "LIMIT",
            "timeInForce": "POST_ONLY",
            "price": str(px),
            "quantity": str(qty_coin),
            # timestamp –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º ‚Äì –¥–æ–±–∞–≤–∏—Ç _private_request
        }
        resp = _private_request("POST", "/openApi/swap/v2/trade/order", params)
        oid = resp["data"]["order"]["id"]
        ids.append(oid)
        logging.info("üõë %s %s limit @ %s  id=%s", name, symbol, px, oid)
    return tuple(ids)
