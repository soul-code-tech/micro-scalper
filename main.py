#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quantum-Scalper 1-15m auto-TF
- async BingX
- Kelly 0.25√ó
- max-drawdown-stop 5 %
- trailing-stop 0.8√óATR
- quick TP1 60 % at 1.2√óATR  ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- trail40 remaining at 0.8√óATR
- breakeven + partial 1R
- auto timeframe 1m-15m
- log-reg signal (expectancy)
- —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ 8-17 UTC
- —Ñ–∏–ª—å—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π ¬±5 –º–∏–Ω
- —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
- –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏—Å—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
"""

import os
import sys
import signal
import asyncio
import logging
import time
import traceback
import aiohttp
from datetime import datetime, timezone

from exchange import BingXAsync
from strategy import micro_score
from risk import calc, max_drawdown_stop
from store import cache
from settings import CONFIG
from tf_selector import best_timeframe
from news_filter import is_news_time
from health_aio import start_health

print("=== DEBUG: –∏–º–ø–æ—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(message)s",
    datefmt="%H:%M",
)
log = logging.getLogger("scalper")

POS: dict[str, dict] = {}
OPEN_ORDERS: dict[str, str] = {}   # symbol -> orderId
PEAK_BALANCE: float = 0.0


def human_float(n: float) -> str:
    return f"{n:.5f}".rstrip("0").rstrip(".") if n > 0.01 else f"{n:.7f}"


async def manage(ex: BingXAsync, sym: str, api_pos: dict):
    pos = POS.get(sym)
    if not pos:
        return
    mark = float(api_pos["markPrice"])
    side = pos["side"]

    # === 1. Trailing SL (0.8√óATR) ===
    atr_dist = pos["atr"] * CONFIG.ATR_MULT_SL
    if side == "LONG":
        new_sl = max(pos["sl"], mark - atr_dist)
    else:
        new_sl = min(pos["sl"], mark + atr_dist)

    if new_sl != pos["sl"]:
        pos["sl"] = new_sl
        log.info("‚¨ÜÔ∏è" if side == "LONG" else "‚¨áÔ∏è", "%s trail SL ‚Üí %s", sym, human_float(new_sl))
        if pos.get("sl_order_id"):
            try:
                await ex.amend_stop_order(sym, pos["sl_order_id"], new_sl)
                log.info("üîí %s amend SL on exchange", sym)
            except Exception as e:
                log.warning("‚ùå amend SL %s: %s", sym, e)

    # === 2. TP1: 60% –ø—Ä–∏ 1.2√óATR ===
    if not pos.get("tp1_done"):
        risk_dist = abs(pos["entry"] - pos["sl_orig"])
        tp1_px = pos["entry"] + risk_dist * CONFIG.TP1_MULT if side == "LONG" else pos["entry"] - risk_dist * CONFIG.TP1_MULT
        if (side == "LONG" and mark >= tp1_px) or (side == "SHORT" and mark <= tp1_px):
            qty60 = pos["qty"] * 0.6
            await ex.close_position(sym, "SELL" if side == "LONG" else "BUY", qty60)
            pos["tp1_done"] = True
            log.info("‚ö° %s TP1 60%% at %s", sym, human_float(mark))

    # === 3. Trail40: –æ—Å—Ç–∞—Ç–æ–∫ 40% —Å —Ç—Ä–µ–π–ª–∏–Ω–≥–æ–º 0.8√óATR ===
    if pos.get("tp1_done"):
        trail_dist = abs(pos["entry"] - pos["sl_orig"]) * CONFIG.TRAIL_MULT
        if side == "LONG":
            new_sl40 = mark - trail_dist
            if new_sl40 > pos["sl"]:
                pos["sl"] = new_sl40
                # –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        else:
            new_sl40 = mark + trail_dist
            if new_sl40 < pos["sl"]:
                pos["sl"] = new_sl40

    # === 4. Breakeven –ø–æ—Å–ª–µ 1R ===
    if not pos.get("breakeven_done"):
        risk_dist = abs(pos["entry"] - pos["sl_orig"])
        be_px = pos["entry"] + risk_dist if side == "LONG" else pos["entry"] - risk_dist
        if (side == "LONG" and mark >= be_px) or (side == "SHORT" and mark <= be_px):
            # –ó–∞–∫—Ä—ã—Ç—å —á–∞—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20%)
            part_qty = pos["qty"] * 0.2
            await ex.close_position(sym, "SELL" if side == "LONG" else "BUY", part_qty)
            pos["breakeven_done"] = True
            pos["sl"] = pos["entry"]  # breakeven
            log.info("üõ°Ô∏è %s breakeven @ %s", sym, human_float(pos["entry"]))

    # === 5. –°—Ç–æ–ø-–∞—É—Ç –ø–æ SL ===
    if (side == "LONG" and mark <= pos["sl"]) or (side == "SHORT" and mark >= pos["sl"]):
        await ex.close_position(sym, "SELL" if side == "LONG" else "BUY", pos["qty"])
        POS.pop(sym, None)
        OPEN_ORDERS.pop(sym, None)
        await ex.cancel_all(sym)
        log.info("üõë %s stopped at %s", sym, human_float(mark))
        return

async def guard(px: float, side: str, book: dict, sym: str) -> bool:
    bid, ask = float(book["bids"][0][0]), float(book["asks"][0][0])
    spread = (ask - bid) / bid
    if spread > CONFIG.MAX_SPREAD:
        log.info("‚è≠Ô∏è  %s wide spread %.4f", sym, spread)
        return False
    return True


async def think(ex: BingXAsync, sym: str, equity: float):
    if OPEN_ORDERS.get(sym):
        try:
            oo = await ex.fetch_order(sym, OPEN_ORDERS[sym])
            status = oo.get("data", {}).get("status", "")
            if status == "FILLED":
                OPEN_ORDERS.pop(sym, None)
            else:
                return
        except Exception as e:
            log.warning("‚ùå –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–¥–µ—Ä %s: %s", sym, e)
            return

    try:
        tf = await best_timeframe(ex, sym)
        klines = await ex.klines(sym, tf, 150)
        book = await ex.order_book(sym, 5)
        if not book.get("bids") or not book.get("asks"):
            log.info("‚è≠Ô∏è  %s ‚Äì –ø—É—Å—Ç–æ–π —Å—Ç–∞–∫–∞–Ω", sym)
            return

        score = micro_score(klines, sym, tf)          # –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
        atr_pc = score["atr_pc"]
        px = float(book["asks"][0][0]) if score["long"] > score["short"] else float(book["bids"][0][0])
        vol_usd = float(klines[-1][5]) * px
        side = ("LONG" if score["long"] > score["short"] else
                "SHORT" if score["short"] > score["long"] else None)

        log.info("üß† %s tf=%s atr=%.4f vol=%.0f$ side=%s long=%.2f short=%.2f",
                 sym, tf, atr_pc, vol_usd, side, score["long"], score["short"])

        utc_hour = datetime.now(timezone.utc).hour
        if not (CONFIG.TRADE_HOURS[0] <= utc_hour < CONFIG.TRADE_HOURS[1]):
            log.info("‚è≠Ô∏è  %s ‚Äì –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞", sym)
            return

        if await is_news_time(5):
            log.info("‚è≠Ô∏è  %s ‚Äì –≤—ã—Å–æ–∫–∏–π –∏–º–ø–∞–∫—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", sym)
            return

        if atr_pc < CONFIG.MIN_ATR_PC:
            log.info("‚è≠Ô∏è  %s low atr", sym)
            return
        if vol_usd < CONFIG.MIN_VOL_USD:
            log.info("‚è≠Ô∏è  %s low vol", sym)
            return
        if not side:
            log.info("‚è≠Ô∏è  %s no side", sym)
            return
        if len(POS) >= CONFIG.MAX_POS:
            log.info("‚è≠Ô∏è  %s max pos reached", sym)
            return
        if not await guard(px, side, book, sym):
            return

        sizing = calc(px, atr_pc * px, side, equity, sym)
        if sizing.size <= 0:
            log.info("‚è≠Ô∏è  %s sizing zero", sym)
            return

        # ‚Üê –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –ü–û–°–õ–ï —Ä–∞—Å—á—ë—Ç–∞ sizing
        min_depth = 2 * sizing.size
        if float(book["asks"][0][1]) < min_depth or float(book["bids"][0][1]) < min_depth:
            log.info("‚è≠Ô∏è  %s ‚Äì –º–µ–ª–∫–∏–π —Å—Ç–∞–∫–∞–Ω", sym)
            return

        # –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ (leverage, place_order, SL/TP) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if sym not in POS and sym not in OPEN_ORDERS:
            try:
                await ex.set_leverage(sym, 50)
            except RuntimeError as e:
                if "leverage already set" not in str(e):
                    log.warning("‚ö†Ô∏è  set_leverage %s: %s", sym, e)

            try:
            ci = await ex.get_contract_info(sym)
            min_qty = float(ci["data"]["minOrderQty"])
            min_nom = min_qty * px
        except Exception as e:
            log.warning("‚ùå minOrderQty %s: %s", sym, e)
            return

        if sizing.size * px < min_nom:
            log.info("‚è≠Ô∏è  %s nominal %.2f < %.2f ‚Äì –ø—Ä–æ–ø—É—Å–∫", sym, sizing.size * px, min_nom)
            return

    except Exception as e:
        log.warning("‚ùå %s data fail: %s", sym, e)
        return

# ========== –Ω–∏–∂–µ ‚Äì –£–†–û–í–ï–ù–¨ –ú–û–î–£–õ–Ø ==========
async def download_weights_once():
    repo = os.getenv("GITHUB_REPOSITORY", "your-login/your-repo")
    for sym in CONFIG.SYMBOLS:
        for tf in CONFIG.TIME_FRAMES:
            fname = f"{sym.replace('-', '')}_{tf}.pkl"
            local = f"weights/{fname}"
            if os.path.exists(local):
                continue
            url = f"https://raw.githubusercontent.com/{repo}/weights/{fname}"
            os.makedirs("weights", exist_ok=True)
            try:
                async with aiohttp.ClientSession() as s:
                    async with s.get(url) as r:
                        r.raise_for_status()
                        with open(local, "wb") as f:
                            f.write(await r.read())
                print(f"‚úÖ –°–∫–∞—á–∞–Ω {local}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ—Ç –≤–µ—Å–æ–≤ {local}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç")


if __name__ == "__main__":
    try:
        print("=== DEBUG: –∑–∞–ø—É—Å–∫–∞–µ–º main() ===")
        asyncio.run(main())
    except Exception as e:
        print("CRASH in main():", e, file=sys.stderr)
        traceback.print_exc()
        sys.exit(1)
   
