import os
import sys
import asyncio
import logging
import time
from datetime import datetime, timezone
import concurrent.futures
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from exchange import BingXAsync
from settings import CONFIG, validate_env
from orders import load_min_lot_cache, limit_entry, await_fill_or_cancel, limit_sl_tp
from strategy import micro_score
from risk import calc, max_drawdown_stop, Sizing
from tf_selector import best_timeframe
from health_aio import start_health


# ---------- –æ–±—â–∏–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ ----------
EXECUTOR = concurrent.futures.ThreadPoolExecutor(max_workers=2)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
POS: Dict[str, Dict] = {}
OPEN_ORDERS: Dict[str, str] = {}
PEAK_BALANCE: float = 0.0
CYCLE: int = 0
_MIN_LOT_CACHE: Dict[str, Dict] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("scalper.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
log = logging.getLogger("scalper")
log = logging.getLogger("scalper")

# ---------- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ï–°–û–í –∏–∑ –ø–∞–ø–∫–∏ weights –≤–µ—Ç–∫–∏ weights ----------
import os, requests

BASE_RAW = "https://raw.githubusercontent.com/soul-code-tech/micro-scalper/weights/weights"
LOCAL_DIR = os.path.join(os.path.dirname(__file__), "weights")
os.makedirs(LOCAL_DIR, exist_ok=True)

FILES = [
    "DOGEUSDT_5m.pkl", "LTCUSDT_5m.pkl", "SUIUSDT_5m.pkl",
    "SHIBUSDT_5m.pkl", "BNBUSDT_5m.pkl", "XRPUSDT_5m.pkl",
]

for fname in FILES:
    local_path = os.path.join(LOCAL_DIR, fname)
    if not os.path.exists(local_path):
        url = f"{BASE_RAW}/{fname}"
        log.info("üì• –°–∫–∞—á–∏–≤–∞—é %s...", fname)
        try:
            r = requests.get(url, timeout=15)
            r.raise_for_status()
            with open(local_path, "wb") as f:
                f.write(r.content)
            log.info("‚úÖ %s —Å–∫–∞—á–∞–Ω", fname)
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                log.warning("‚ö†Ô∏è %s –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ GitHub, –ø—Ä–æ–ø—É—Å–∫", fname)
            else:
                log.error("‚ùå %s ‚Äì HTTP %d: %s", fname, e.response.status_code, e)
        except Exception as e:
            log.error("‚ùå %s ‚Äì –æ—à–∏–±–∫–∞: %s", fname, e)
# ---------- –ü–†–û–í–ï–†–ö–ê –í–ï–°–û–í ----------
from strategy import MODEL_DIR, load_model
log.info("üìÅ MODEL_DIR = %s", MODEL_DIR)
s, c, t = load_model("DOGE-USDT", "5m")
log.info("üì¶ DOGE-USDT 5m  scaler=%s  clf=%s  thr=%.2f", s is not None, c is not None, t)
def calculate_used_nominal() -> float:
    """–°—á–∏—Ç–∞–µ—Ç –æ–±—â–∏–π –Ω–æ–º–∏–Ω–∞–ª –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π."""
    total = 0.0
    for pos in POS.values():
        total += pos.get("qty", 0) * pos.get("entry", 0)
    return total

async def main():
    global PEAK_BALANCE, CYCLE, _MIN_LOT_CACHE   # ‚Üê –¥–æ–±–∞–≤—å—Ç–µ
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    validate_env()
    
    # –ó–∞–ø—É—Å–∫ health endpoint
    asyncio.create_task(start_health())
    port = 1000
    log.info("üíì Health endpoint started on port %d", port)
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä BingXAsync
    async with BingXAsync(os.getenv("BINGX_API_KEY"), os.getenv("BINGX_SECRET_KEY")) as ex:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω-–ª–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        await load_min_lot_cache(ex)
        # ---------- –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô –ü–†–ò –°–¢–ê–†–¢–ï ----------
        positions = await ex.fetch_positions()
        api_pos = {p["symbol"]: p for p in positions.get("data", [])}
        for sym, api in api_pos.items():
            if float(api.get("positionAmt", 0)) != 0:
                POS[sym] = dict(
                    side="LONG" if float(api["positionAmt"]) > 0 else "SHORT",
                    qty=abs(float(api["positionAmt"])),
                    entry=float(api["entryPrice"]),
                    sl_orig=float(api.get("stopLoss", 0)),
                    tp=float(api.get("takeProfit", 0)),
                    ts_open=time.time(),
                )
                log.info("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª %s: %s  qty=%.3f  entry=%.5f",
                         sym, POS[sym]["side"], POS[sym]["qty"], POS[sym]["entry"])
        
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        while True:
            global CYCLE
            CYCLE += 1
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                free_margin = await ex.get_free_margin() 
                equity        = free_margin          # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏ 
                log.info("üí∞ Free margin: $%.2f", free_margin)
                
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                if equity > PEAK_BALANCE or PEAK_BALANCE == 0:
                    PEAK_BALANCE = equity
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                positions = await ex.fetch_positions()
                api_pos = {p["symbol"]: p for p in positions.get("data", [])}
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                for sym in list(POS.keys()):
                    if sym not in api_pos or float(api_pos.get(sym, {}).get("positionAmt", 0)) == 0:
                        POS.pop(sym, None)
                        OPEN_ORDERS.pop(sym, None)
                        await ex.cancel_all(sym)
                        log.info(f"üßπ {sym} —Å–±—Ä–æ—à–µ–Ω–∞ (–Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ)")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                for symbol in CONFIG.SYMBOLS:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
                        if symbol in api_pos and float(api_pos[symbol].get("positionAmt", 0)) != 0:
                            # –£–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π
                            await manage_position(ex, symbol, api_pos[symbol])
                        else:
                            # –ò—â–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–∞
                            await open_new_position(ex, symbol, equity)
                    except Exception as e:
                        # –º–æ–ª—á–∞–ª–∏–≤—ã–π –ø—Ä–æ–ø—É—Å–∫ ‚Äì –Ω–µ –ª–æ–º–∞–µ–º —Ü–∏–∫–ª
                        if "101204" in str(e) or "101485" in str(e) or "insufficient" in str(e).lower():
                            log.info("‚è≠Ô∏è %s ‚Äì –ø—Ä–æ–ø—É—Å–∫ (–º–∞—Ä–∂–∞/–ª–æ—Ç): %s", symbol, e)
                        else:
                            log.warning("‚ö†Ô∏è %s ‚Äì –ø—Ä–æ–ø—É—Å–∫: %s", symbol, e)
                                                   
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                    await asyncio.sleep(15)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ PnL
                if CYCLE % 20 == 0:
                    await check_total_pnl(ex, equity)   # ‚Üê –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if CYCLE % 10 == 0:
                    log.info(f"üíì ALIVE  cycle={CYCLE}  POS={len(POS)}  EQ=${equity:.2f}")
                
                # –°–≤–æ–¥–∫–∞
                if CYCLE % 15 == 0:
                    dd = (PEAK_BALANCE - equity) / PEAK_BALANCE * 100 if PEAK_BALANCE else 0.0
                    log.info(f"üìä EQ:${equity:.2f}  Peak:${PEAK_BALANCE:.2f}  DD:{dd:.2f}%  POS:{len(POS)}  ORD:{len(OPEN_ORDERS)}")
                # ---------- Health –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ ----------
                if CYCLE % 30 == 0:
                    await check_total_pnl(ex, equity)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(10)
                
            except Exception as e:
                log.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                log.exception(e)
                await asyncio.sleep(60)

async def manage_position(ex: BingXAsync, symbol: str, api_pos: dict):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
    pos = POS.get(symbol)
    if not pos:
        return
    
    mark = float(api_pos["markPrice"])
    side = pos["side"] 
    # ---------- –≤—ã—Ö–æ–¥ –ø–æ +5 % –∫ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ ----------
    gain_pc = (mark - pos["entry"]) / pos["entry"] * 100
    if gain_pc >= 5.0:  # –ø–∏–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç ‚â• 5 %
        log.info("üéØ %s +5%% reached (%.2f%%) ‚Äì closing entire position", symbol, gain_pc)
        await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", pos["qty"])
        POS.pop(symbol, None)
        await ex.cancel_all(symbol)
        return  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ manage_position —Å—Ä–∞–∑—É# ‚Üê –¥–æ–±–∞–≤–∏—Ç—å
    risk_dist = abs(pos["entry"] - pos["sl_orig"])  # ‚Üê –¥–æ–±–∞–≤–∏—Ç—å
    # ---------- –ñ–Å–°–¢–ö–ò–ô 10 % —Å—Ç–æ–ø ----------
    if not pos.get("sl_10_done"):
        sl_10 = pos["entry"] * (0.90 if side == "LONG" else 1.10)
        if (side == "LONG" and mark <= sl_10) or (side == "SHORT" and mark >= sl_10):
            await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", pos["qty"])
            POS.pop(symbol, None)
            log.info("üõë %s 10%% SL triggered at %.5f", symbol, mark)
            return
    
    # TP1: 60% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1.4√óATR
    if not pos.get("tp1_done"):
        tp1_px = pos["entry"] + risk_dist * CONFIG.TP1_MULT if side == "LONG" else pos["entry"] - risk_dist * CONFIG.TP1_MULT
        if (side == "LONG" and mark >= tp1_px) or (side == "SHORT" and mark <= tp1_px):
            qty60 = pos["qty"] * 0.6
            await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", qty60)
            pos["tp1_done"] = True
            log.info(f"‚ö° {symbol} TP1 60% at {mark:.5f}")
    
    # BREAKEVEN: –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ +1R
    if not pos.get("breakeven_done"):
        be_px = pos["entry"] + risk_dist if side == "LONG" else pos["entry"] - risk_dist
        if (side == "LONG" and mark >= be_px) or (side == "SHORT" and mark <= be_px):
            part_qty = pos["qty"] * 0.2
            await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", part_qty)
            pos["breakeven_done"] = True
            pos["sl"] = pos["entry"]
            log.info(f"üõ°Ô∏è {symbol} breakeven @ {pos['entry']:.5f}")
    
    # TRAILING STOP –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è 40%
    trail_dist = abs(pos["entry"] - pos["sl_orig"]) * CONFIG.TRAIL_MULT
    if pos["side"] == "LONG":
        new_sl = mark - trail_dist
        pos["sl"] = max(pos["sl"], new_sl)   # —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥
    else:
        new_sl = mark + trail_dist
        pos["sl"] = min(pos["sl"], new_sl)
    
    # STOP-OUT
    if (side == "LONG" and mark <= pos["sl"]) or (side == "SHORT" and mark >= pos["sl"]):
        fee = pos["qty"] * mark * 0.001
        pnl = (mark - pos["entry"]) * pos["qty"] * (1 if side == "LONG" else -1) - fee
        log.info(f"üõë {symbol} stopped at {mark:.5f}  qty={pos['qty']:.3f}  fee={fee:.4f}$  pnl={pnl:.4f}$")
        await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", pos["qty"])
        POS.pop(symbol, None)
    # ---------- –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ +12 % ----------
    if not pos.get("tp_fast_done"):
        tp_fast = pos["entry"] * (1.06 if side == "LONG" else 0.88)
        if (side == "LONG" and mark >= tp_fast) or (side == "SHORT" and mark <= tp_fast):
            await ex.close_position(symbol, "SELL" if side == "LONG" else "BUY", pos["qty"])
            POS.pop(symbol, None)
            log.info("üéØ %s +6%% closed at %.5f", symbol, mark)
            return  

async def open_new_position(ex: BingXAsync, symbol: str, equity: float):
    """–ò—â–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
    
    # ---------- –ü–†–û–í–ï–†–ö–ê –°–í–û–ë–û–î–ù–û–ô –ú–ê–†–ñ–ò ----------
    free_margin = await ex.get_free_margin()
    if free_margin < 1.0:
        log.info("‚è≠Ô∏è –°–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏ %.2f < 1 $ ‚Äì –ø—Ä–æ–ø—É—Å–∫ —Å–∏–º–≤–æ–ª–∞ %s", free_margin, symbol)
        return  # ‚úÖ –í–´–•–û–î–ò–ú –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –∏–∑ —Ü–∏–∫–ª–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
    if OPEN_ORDERS.get(symbol):
        try:
            oo = await ex.fetch_order(symbol, OPEN_ORDERS[symbol])
            status = oo.get("data", {}).get("status", "")
            if status == "FILLED":
                OPEN_ORDERS.pop(symbol, None)
            else:
                return
        except Exception as e:
            if "101204" in str(e) or "101209" in str(e):
                log.warning("‚ö†Ô∏è %s ‚Äì –º–∞—Ä–∂–∞ –º–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫", symbol)
            else:
                log.exception(e)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    tf = await best_timeframe(ex, symbol)
    klines = await ex.klines(symbol, tf, 150)
    if not klines:
        log.info(f"‚è≠Ô∏è {symbol} {tf} ‚Äì klines –ü–£–°–¢–û")
        return

    if isinstance(klines[0], dict):
        klines = [[d["time"], d["open"], d["high"], d["low"], d["close"], d["volume"]] for d in klines]

    last = klines[-1]
    log.info(f"RAW {symbol} {tf}  len={len(klines)}  last: {last}")
    log.info(f"THINK-CONTINUE {symbol} ‚Äì —Ä–∞—Å—á—ë—Ç –Ω–∞—á–∞—Ç")

    if float(last[2]) == float(last[3]):
        log.info(f"FLAT {symbol} {tf}  h=l={last[2]}")
        return

    log.info(f"‚è≥ CALLING micro_score() for {symbol}")
    score = await asyncio.get_event_loop().run_in_executor(
        concurrent.futures.ThreadPoolExecutor(max_workers=5),
        micro_score,
        klines, symbol, tf
    )
    log.info(f"‚úÖ micro_score() DONE for {symbol}")

    atr_pc = score["atr_pc"]
    px = float(last[4])
    vol_usd = float(last[5]) * px
    min_vol_dyn = equity * 1.0
    side = ("LONG" if score["long"] > score["short"] else
            "SHORT" if score["short"] > score["long"] else None)

    log.info(f"üß† {symbol} tf={tf} atr={atr_pc:.4f} vol={vol_usd:.0f}$ side={side} long={score['long']:.2f} short={score['short']:.2f}")

    # –§–∏–ª—å—Ç—Ä—ã
    utc_hour = datetime.now(timezone.utc).hour
    if not (CONFIG.TRADE_HOURS[0] <= utc_hour < CONFIG.TRADE_HOURS[1]):
        log.info(f"‚è≠Ô∏è  {symbol} ‚Äì –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞")
        return

    if atr_pc < CONFIG.MIN_ATR_PC:
        log.info(f"‚è≠Ô∏è  {symbol} low atr")
        return

    if vol_usd < min_vol_dyn:
        log.info(f"‚è≠Ô∏è {symbol} low vol (dyn {min_vol_dyn:.0f}$)")
        return

    if len(POS) >= CONFIG.MAX_POS:
        log.info(f"‚è≠Ô∏è  {symbol} max pos reached")
        return

    if symbol in POS:
        log.info(f"‚è≠Ô∏è {symbol} already in POS ‚Äì skip")
        return

    # ---------- –†–ê–°–ß–Å–¢ –†–ê–ó–ú–ï–†–ê ----------
    sizing = calc(px, atr_pc * px, side, equity, symbol)
    if sizing.size <= 0:
        log.info(f"‚è≠Ô∏è  {symbol} sizing zero")
        return

    # ---------- –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –Ω–µ –±–æ–ª–µ–µ MAX_BALANCE_PC –æ—Ç equity ----------
    max_nom_per_trade = equity * CONFIG.MAX_BALANCE_PC
    if sizing.size * px > max_nom_per_trade:
        new_size = max_nom_per_trade / px
        sizing = Sizing(
            size=new_size,
            usd_risk=sizing.usd_risk * (new_size / sizing.size),
            sl_px=sizing.sl_px,
            tp_px=sizing.tp_px,
            partial_qty=new_size * CONFIG.PARTIAL_TP,
            atr=sizing.atr
        )
        log.info(f"üìâ {symbol} —É—Ä–µ–∑–∞–Ω –¥–æ {CONFIG.MAX_BALANCE_PC*100:.0f}% –±–∞–ª–∞–Ω—Å–∞: nominal=${new_size * px:.2f}")

    # ---------- –£–ß–Å–¢ –£–ñ–ï –ó–ê–ù–Ø–¢–û–ô –ú–ê–†–ñ–ò ----------
    used_nominal = calculate_used_nominal()
    theoretical_max = equity * CONFIG.LEVERAGE
    available_nominal = theoretical_max - used_nominal

    if available_nominal <= 0:
        log.info(f"‚è≠Ô∏è {symbol} ‚Äî –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏ (used: ${used_nominal:.2f})")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç: 80% –æ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—Ä–∂–∏
    safe_nominal = available_nominal * 0.8
    max_coins = safe_nominal / px
    final_size = min(sizing.size, max_coins)

    if final_size <= 0:
        log.info(f"‚è≠Ô∏è {symbol} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏ –¥–∞–∂–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
        return

    # ---------- –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ù–û–ú–ò–ù–ê–õ ----------
    min_nom = CONFIG.MIN_NOTIONAL_FALLBACK * 0.5 if symbol in (
        "DOGE-USDT", "LTC-USDT", "SHIB-USDT", "XRP-USDT", "BNB-USDT", "SUI-USDT"
    ) else CONFIG.MIN_NOTIONAL_FALLBACK
    min_nom = min(min_nom, safe_nominal)

    if final_size * px < min_nom:
        final_size = min_nom / px
        # –ù–æ –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞
        final_size = min(final_size, max_coins)
        if final_size * px < min_nom:
            log.info(f"‚è≠Ô∏è {symbol} ‚Äî –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ä–∂–∏ –¥–∞–∂–µ –Ω–∞ –º–∏–Ω. –Ω–æ–º–∏–Ω–∞–ª ${min_nom:.2f}")
            return
        log.info(f"‚ö†Ô∏è {symbol} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ –º–∏–Ω. –Ω–æ–º–∏–Ω–∞–ª–∞: {final_size * px:.2f}$")

    # ---------- –§–ò–ù–ê–õ–¨–ù–´–ô SIZING ----------
    sizing = Sizing(
        size=final_size,
        usd_risk=sizing.usd_risk * (final_size / sizing.size) if sizing.size > 0 else 0,
        sl_px=sizing.sl_px,
        tp_px=sizing.tp_px,
        partial_qty=final_size * CONFIG.PARTIAL_TP,
        atr=sizing.atr
    )

    # ---------- –†–ò–°–ö –ù–ï –ë–û–õ–ï–ï 20% –ë–ê–õ–ê–ù–°–ê ----------
    max_risk_usd = equity * 0.20
    if sizing.usd_risk > max_risk_usd:
        k = max_risk_usd / sizing.usd_risk
        new_size = sizing.size * k
        sizing = Sizing(
            size=new_size,
            usd_risk=max_risk_usd,
            sl_px=sizing.sl_px,
            tp_px=sizing.tp_px,
            partial_qty=new_size * CONFIG.PARTIAL_TP,
            atr=sizing.atr
        )
        log.info("‚öñÔ∏è %s —Ä–∏—Å–∫ —É—Ä–µ–∑–∞–Ω –¥–æ 20%% –±–∞–ª–∞–Ω—Å–∞", symbol)

    log.info(f"FLOW-OK {symbol}  px={px:.5f} sizing={sizing.size:.6f}")

    if symbol not in POS and symbol not in OPEN_ORDERS:
        try:
            await ex.set_leverage(symbol, CONFIG.LEVERAGE, "LONG" if side == "LONG" else "SHORT")
        except RuntimeError as e:
            if "leverage already set" not in str(e):
                log.warning(f"‚ö†Ô∏è set_leverage {symbol}: {e}")

        order_data = await limit_entry(
            ex, symbol,
            "BUY" if side == "LONG" else "SELL",
            sizing.size,
            px,
            sizing.sl_px,
            sizing.tp_px,
            equity
        )
        if order_data is None:
            log.info(f"‚è≠ {symbol} ‚Äì –ø—Ä–æ–ø—É—Å–∫ (limit_entry –≤–µ—Ä–Ω—É–ª None)")
            return

        order_id, entry_px, qty_coin = order_data
        OPEN_ORDERS[symbol] = order_id

        avg_px = await await_fill_or_cancel(ex, order_id, symbol, max_sec=8)
        if avg_px is None:
            return

        sl_tp_ids = await limit_sl_tp(
            ex, symbol,
            "BUY" if side == "LONG" else "SELL",
            qty_coin,
            sizing.sl_px,
            sizing.tp_px
        )

        POS[symbol] = dict(
            side=side,
            qty=qty_coin,
            entry=avg_px,
            sl=sizing.sl_px,
            sl_orig=sizing.sl_px,
            tp=sizing.tp_px,
            part=qty_coin * CONFIG.PARTIAL_TP,
            atr=sizing.atr,
            tp1_done=False,
            breakeven_done=False,
            sl_10_done=False,
            tp_fast_done=False,
        )
        log.info(f"üì® {symbol} {side} {qty_coin:.6f} @ {avg_px:.5f} SL={sizing.sl_px:.5f} TP={sizing.tp_px:.5f}")
    # ---------- –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ü–£–°–ö ‚Äì –µ—Å–ª–∏ –Ω–µ –≤–æ—à–ª–∏ ----------
    if symbol not in POS and symbol not in OPEN_ORDERS:
        log.info("‚è≠Ô∏è %s ‚Äì –Ω–µ—Ç –≤—Ö–æ–¥–∞, –∏–¥—ë–º –¥–∞–ª—å—à–µ", symbol)    

async def check_total_pnl(ex: BingXAsync, equity: float):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–∏–π PnL –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ +2%"""
    total_pnl = 0.0
    try:
        positions = await ex.fetch_positions()
        api_pos = {p["symbol"]: p for p in positions.get("data", [])}
        
        for sym in POS:
            if sym not in api_pos:
                continue
            pos = POS[sym]
            mark = float(api_pos[sym]["markPrice"])
            fee = pos["qty"] * mark * 0.001
            pnl = (mark - pos["entry"]) * pos["qty"] * (1 if pos["side"] == "LONG" else -1) - fee
            total_pnl += pnl
        
        if total_pnl > equity * 0.02:
            log.info(f"üí∞ TOTAL PnL = {total_pnl:.2f}$ > 2% ‚Äì –∑–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
            for s in list(POS.keys()):
                side = "SELL" if POS[s]["side"] == "LONG" else "BUY"
                await ex.close_position(s, side, POS[s]["qty"])
                POS.pop(s, None)
                await ex.cancel_all(s)
            log.info("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –ø–æ –æ–±—â–µ–º—É PnL")
    except Exception as e:
        log.warning(f"‚ö†Ô∏è  –ù–µ —Å–º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL: {e}")
 
async def self_diagnose(ex: BingXAsync):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    try:
        info = await ex._public_get("/openApi/swap/v2/server/time")
        server_time = info["data"]["serverTime"]
        local_time = int(time.time() * 1000)
        time_diff = abs(server_time - local_time)
        
        if time_diff > 5000:
            log.warning("‚è∞ –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: %d –º—Å ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏", time_diff)
            # –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        contracts = await ex._public_get("/openApi/swap/v2/quote/contracts")
        symbols_online = [c["symbol"] for c in contracts["data"]]
        for s in CONFIG.SYMBOLS:
            if s.replace("-", "") not in symbols_online:
                log.warning("‚ö†Ô∏è –°–∏–º–≤–æ–ª %s –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", s)
        
        return True
    except Exception as e:
        log.error("üîß –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: %s", e)
        return False       

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"CRASH in main(): {e}", exc_info=True)
        sys.exit(1)
